/**
 * GESTOR DE RESERVAS - BookingManager
 * 
 * Esta clase maneja todo el sistema de reservas de citas, incluyendo:
 * - Validaci√≥n de formularios
 * - Env√≠o de emails autom√°ticos
 * - Gesti√≥n de campos condicionales
 * - Control de modales y notificaciones
 * - Almacenamiento local de respaldo
 */

class BookingManager {
    /**
     * CONSTRUCTOR - Inicializa la configuraci√≥n del gestor
     * Establece los par√°metros de EmailJS y ejecuta la inicializaci√≥n
     */
    constructor() {
        // Configuraci√≥n de EmailJS para env√≠o de emails autom√°ticos
        this.emailConfig = {
            serviceId: 'service_xsakmyn',        // ID del servicio de email
            templateId: 'template_1dt15su',      // ID de la plantilla HTML del email
            publicKey: 'vdWmzVZ71cnknMJPF'      // Clave p√∫blica para autenticaci√≥n
        };
        
        this.isInitialized = false;  // Control de estado de inicializaci√≥n
        this.init();                 // Ejecutar inicializaci√≥n autom√°tica
    }

    /**
     * INICIALIZACI√ìN PRINCIPAL
     * Configura todos los componentes del sistema de reservas
     */
    async init() {
        try {
            // Configurar el formulario principal y sus eventos
            await this.setupForm();
            
            // Configurar validaci√≥n de fechas (no permitir fechas pasadas)
            this.setupDateValidation();
            
            // Configurar campos que aparecen/desaparecen seg√∫n selecciones
            this.setupConditionalFields();
            
            // Configurar ventana modal de √©xito
            this.setupModal();
            
            // Cargar y configurar EmailJS para env√≠o de emails
            await this.loadEmailJS();
            
            this.isInitialized = true;
            console.log('‚úÖ BookingManager initialized successfully');
        } catch (error) {
            console.error('‚ùå Error initializing BookingManager:', error);
        }
    }

    /**
     * CARGA DE EMAILJS
     * Carga din√°micamente la librer√≠a EmailJS desde CDN
     * Incluye manejo de timeouts y errores
     */
    async loadEmailJS() {
        return new Promise((resolve, reject) => {
            // Si EmailJS ya est√° cargado, no hacer nada
            if (window.emailjs) {
                resolve();
                return;
            }

            // Crear script tag para cargar EmailJS
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js';
            
            // Timeout de seguridad (10 segundos m√°ximo)
            const timeout = setTimeout(() => {
                script.remove();
                reject(new Error('EmailJS load timeout'));
            }, 10000);

            // Cuando el script se carga exitosamente
            script.onload = () => {
                clearTimeout(timeout);
                try {
                    // Inicializar EmailJS con la clave p√∫blica
                    emailjs.init(this.emailConfig.publicKey);
                    console.log('‚úÖ EmailJS loaded and initialized');
                    resolve();
                } catch (error) {
                    reject(error);
                }
            };
            
            // Si hay error cargando el script
            script.onerror = () => {
                clearTimeout(timeout);
                script.remove();
                reject(new Error('Failed to load EmailJS'));
            };
            
            // A√±adir el script al documento
            document.head.appendChild(script);
        });
    }

    /**
     * CONFIGURACI√ìN DEL FORMULARIO
     * Establece eventos para env√≠o y reset del formulario
     */
    setupForm() {
        const form = document.getElementById('bookingForm');
        if (!form) {
            console.warn('Booking form not found');
            return;
        }

        // Evento para manejar el env√≠o del formulario
        form.addEventListener('submit', (e) => {
            e.preventDefault();           // Prevenir env√≠o normal del formulario
            this.handleSubmit(form);      // Manejar env√≠o personalizado
        });

        // Configurar bot√≥n de reset/limpiar
        const resetBtn = document.getElementById('resetBtn');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => {
                form.reset();                    // Limpiar todos los campos
                this.hideAddressSection();      // Ocultar secci√≥n de direcci√≥n
            });
        }
    }

    /**
     * VALIDACI√ìN DE FECHAS
     * Establece fechas m√≠nimas y m√°ximas permitidas para reservas
     */
    setupDateValidation() {
        const dateInput = document.getElementById('date');
        if (dateInput) {
            // Fecha m√≠nima: hoy (no permitir fechas pasadas)
            const today = new Date().toISOString().split('T')[0];
            dateInput.min = today;
            
            // Fecha m√°xima: 3 meses desde hoy
            const maxDate = new Date();
            maxDate.setMonth(maxDate.getMonth() + 3);
            dateInput.max = maxDate.toISOString().split('T')[0];
        }
    }

    /**
     * CONFIGURACI√ìN DE CAMPOS CONDICIONALES
     * Maneja la aparici√≥n/desaparici√≥n de campos seg√∫n selecciones del usuario
     */
    setupConditionalFields() {
        const pickupCheckbox = document.getElementById('pickup');
        const addressSection = document.getElementById('addressSection');

        if (pickupCheckbox && addressSection) {
            // Cuando cambia el estado del checkbox de recolecci√≥n
            pickupCheckbox.addEventListener('change', () => {
                if (pickupCheckbox.checked) {
                    this.showAddressSection();    // Mostrar campo de direcci√≥n
                } else {
                    this.hideAddressSection();    // Ocultar campo de direcci√≥n
                }
            });
        }
    }

    /**
     * MOSTRAR SECCI√ìN DE DIRECCI√ìN
     * Hace visible el campo de direcci√≥n y lo marca como requerido
     */
    showAddressSection() {
        const addressSection = document.getElementById('addressSection');
        const addressInput = document.getElementById('address');
        
        if (addressSection && addressInput) {
            addressSection.classList.remove('hidden');  // Mostrar visualmente
            addressInput.required = true;               // Marcar como campo obligatorio
        }
    }

    /**
     * OCULTAR SECCI√ìN DE DIRECCI√ìN
     * Oculta el campo de direcci√≥n y lo marca como no requerido
     */
    hideAddressSection() {
        const addressSection = document.getElementById('addressSection');
        const addressInput = document.getElementById('address');
        
        if (addressSection && addressInput) {
            addressSection.classList.add('hidden');     // Ocultar visualmente
            addressInput.required = false;              // Marcar como no obligatorio
            addressInput.value = '';                    // Limpiar el valor
        }
    }

    /**
     * CONFIGURACI√ìN DE MODAL
     * Establece eventos para mostrar/ocultar ventana modal de √©xito
     */
    setupModal() {
        const modal = document.getElementById('successModal');
        const closeBtn = document.getElementById('closeModal');

        if (closeBtn && modal) {
            // Cerrar modal con bot√≥n X
            closeBtn.addEventListener('click', () => {
                this.hideModal();
            });

            // Cerrar modal haciendo click fuera de √©l
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.hideModal();
                }
            });
        }
    }

    /**
     * MOSTRAR MODAL DE √âXITO
     * Muestra la ventana modal y bloquea scroll del body
     */
    showModal() {
        const modal = document.getElementById('successModal');
        if (modal) {
            modal.classList.remove('hidden');          // Hacer visible
            document.body.style.overflow = 'hidden';   // Bloquear scroll de fondo
        }
    }

    /**
     * OCULTAR MODAL
     * Oculta la ventana modal y restaura scroll del body
     */
    hideModal() {
        const modal = document.getElementById('successModal');
        if (modal) {
            modal.classList.add('hidden');             // Ocultar
            document.body.style.overflow = '';         // Restaurar scroll
        }
    }

    /**
     * MANEJO DE ENV√çO DEL FORMULARIO
     * Procesa el env√≠o completo: validaci√≥n, email y confirmaci√≥n
     */
    async handleSubmit(form) {
        // Verificar que el sistema est√© inicializado
        if (!this.isInitialized) {
            console.warn('BookingManager not initialized yet');
            this.showErrorNotification('Sistema no inicializado. Por favor recarga la p√°gina.');
            return;
        }

        try {
            // Mostrar estado de carga en el bot√≥n
            this.setLoadingState(true);

            // Extraer datos del formulario
            const formData = new FormData(form);
            const bookingData = Object.fromEntries(formData.entries());

            // Validar que todos los campos requeridos est√©n completos
            if (!this.validateForm(bookingData)) {
                throw new Error('Por favor completa todos los campos requeridos');
            }

            console.log('üìß Enviando email con datos:', bookingData);

            // Enviar email de reserva al negocio
            await this.sendBookingEmail(bookingData);

            // Guardar reserva en almacenamiento local (respaldo)
            this.saveBooking(bookingData);

            // Mostrar confirmaci√≥n de √©xito
            this.showModal();
            form.reset();                    // Limpiar formulario
            this.hideAddressSection();      // Ocultar campos condicionales

            this.showSuccessNotification('¬°Reserva enviada exitosamente! Recibir√°s confirmaci√≥n pronto.');

        } catch (error) {
            console.error('‚ùå Error enviando reserva:', error);
            this.showErrorNotification('Error al enviar la reserva. Por favor intenta nuevamente o contacta por tel√©fono.');
        } finally {
            // Restaurar estado normal del bot√≥n
            this.setLoadingState(false);
        }
    }

    /**
     * ENV√çO DE EMAIL DE RESERVA
     * Utiliza EmailJS para enviar la informaci√≥n de la reserva por email
     */
    async sendBookingEmail(data) {
        // Verificar que EmailJS est√© disponible
        if (!window.emailjs) {
            throw new Error('EmailJS no est√° disponible');
        }

        // Mapeo de c√≥digos de servicios a nombres legibles en espa√±ol
        const serviceNames = {
            'alteraciones-basicas': 'Alteraciones B√°sicas ($25-50)',
            'reparaciones': 'Reparaciones ($15-35)', 
            'ajustes-formales': 'Ajustes Formales ($40-80)',
            'vestidos-novia': 'Vestidos de Novia ($150-300)',
            'diseno-personalizado': 'Dise√±o Personalizado (Cotizaci√≥n)'
        };

        // Obtener nombre legible del servicio
        const serviceName = serviceNames[data.service] || data.service;

        // Preparar par√°metros que coinciden con la plantilla de EmailJS
        const templateParams = {
            // Informaci√≥n personal del cliente
            from_name: `${data.firstName} ${data.lastName}`,
            from_email: data.email,
            phone: data.phone,
            
            // Detalles del servicio
            service: serviceName,
            date: this.formatDate(data.date),
            time: this.formatTime(data.time),
            
            // Opciones adicionales
            priority: data.priority ? 'S√≠' : 'No',          // Servicio express
            pickup: data.pickup ? 'S√≠' : 'No',              // Recolecci√≥n a domicilio
            address: data.address || '',                     // Direcci√≥n (si aplica)
            description: data.description || '',             // Descripci√≥n adicional
            
            // Metadatos del email
            to_email: 'info@margaritastailoring.com',        // Email del negocio
            subject: `Nueva Reserva - ${data.firstName} ${data.lastName}`,
            
            // Mensaje completo como respaldo
            message: this.createFullMessage(data, serviceName)
        };

        console.log('üìß Par√°metros del email:', templateParams);

        try {
            // Enviar email usando EmailJS
            const result = await emailjs.send(
                this.emailConfig.serviceId,
                this.emailConfig.templateId,
                templateParams
            );

            console.log('‚úÖ Email enviado exitosamente:', result);
            return result;

        } catch (error) {
            console.error('‚ùå Error enviando email:', error);
            
            // Proporcionar mensaje de error m√°s espec√≠fico seg√∫n el c√≥digo
            let errorMessage = 'Error desconocido enviando email';
            
            if (error.status === 400) {
                errorMessage = 'Error en los datos del formulario';
            } else if (error.status === 401) {
                errorMessage = 'Error de autenticaci√≥n con EmailJS';
            } else if (error.status === 403) {
                errorMessage = 'Acceso denegado a EmailJS';
            } else if (error.status >= 500) {
                errorMessage = 'Error del servidor de EmailJS';
            }

            throw new Error(errorMessage);
        }
    }

    /**
     * FORMATEO DE FECHA
     * Convierte fecha del input a formato legible en espa√±ol
     */
    formatDate(dateString) {
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('es-ES', {
                weekday: 'long',      // D√≠a de la semana completo
                year: 'numeric',      // A√±o en n√∫meros
                month: 'long',        // Mes completo
                day: 'numeric'        // D√≠a del mes
            });
        } catch (error) {
            return dateString;    // Devolver original si hay error
        }
    }

    /**
     * FORMATEO DE HORA
     * Convierte hora del input a formato legible de 24 horas
     */
    formatTime(timeString) {
        try {
            const [hours, minutes] = timeString.split(':');
            const date = new Date();
            date.setHours(parseInt(hours), parseInt(minutes));
            return date.toLocaleTimeString('es-ES', {
                hour: '2-digit',      // Hora con 2 d√≠gitos
                minute: '2-digit'     // Minutos con 2 d√≠gitos
            });
        } catch (error) {
            return timeString;    // Devolver original si hay error
        }
    }

    /**
     * CREACI√ìN DE MENSAJE COMPLETO
     * Genera un mensaje de texto completo con todos los detalles de la reserva
     */
    createFullMessage(data, serviceName) {
        let message = `NUEVA RESERVA DE CITA\n\n`;
        message += `Nombre: ${data.firstName} ${data.lastName}\n`;
        message += `Email: ${data.email}\n`;
        message += `Tel√©fono: ${data.phone}\n`;
        message += `Servicio: ${serviceName}\n`;
        message += `Fecha: ${this.formatDate(data.date)}\n`;
        message += `Hora: ${this.formatTime(data.time)}\n`;
        message += `Servicio Express: ${data.priority ? 'S√≠' : 'No'}\n`;
        message += `Recolecci√≥n a domicilio: ${data.pickup ? 'S√≠' : 'No'}\n`;
        
        // A√±adir direcci√≥n solo si fue proporcionada
        if (data.address) {
            message += `Direcci√≥n de recolecci√≥n: ${data.address}\n`;
        }
        
        // A√±adir descripci√≥n adicional si fue proporcionada
        if (data.description) {
            message += `\nDescripci√≥n adicional:\n${data.description}\n`;
        }

        // A√±adir timestamp de cu√°ndo se realiz√≥ la reserva
        message += `\n---\nReserva realizada el ${new Date().toLocaleString('es-ES')}`;
        
        return message;
    }

    /**
     * VALIDACI√ìN DEL FORMULARIO
     * Verifica que todos los campos requeridos est√©n completos y sean v√°lidos
     */
    validateForm(data) {
        // Lista de campos obligatorios
        const required = ['firstName', 'lastName', 'email', 'phone', 'service', 'date', 'time'];
        
        // Verificar que todos los campos requeridos est√©n presentes
        for (const field of required) {
            if (!data[field] || data[field].trim() === '') {
                console.error(`‚ùå Campo requerido faltante: ${field}`);
                this.showErrorNotification(`El campo ${this.getFieldDisplayName(field)} es requerido`);
                return false;
            }
        }

        // Validar formato de email usando expresi√≥n regular
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(data.email)) {
            console.error('‚ùå Formato de email inv√°lido');
            this.showErrorNotification('Por favor ingresa un email v√°lido');
            return false;
        }

        // Validar formato b√°sico de tel√©fono (n√∫meros, espacios, guiones, par√©ntesis)
        const phoneRegex = /^[\d\s\-\(\)\+]+$/;
        if (!phoneRegex.test(data.phone.trim())) {
            console.error('‚ùå Formato de tel√©fono inv√°lido');
            this.showErrorNotification('Por favor ingresa un tel√©fono v√°lido');
            return false;
        }

        // Si requiere recolecci√≥n, verificar que se haya proporcionado direcci√≥n
        if (data.pickup && (!data.address || data.address.trim() === '')) {
            console.error('‚ùå Direcci√≥n requerida para recolecci√≥n');
            this.showErrorNotification('La direcci√≥n es requerida para el servicio de recolecci√≥n');
            return false;
        }

        return true;  // Todas las validaciones pasaron
    }

    /**
     * OBTENER NOMBRE LEGIBLE DE CAMPO
     * Convierte nombres t√©cnicos de campos a nombres legibles para el usuario
     */
    getFieldDisplayName(field) {
        const fieldNames = {
            firstName: 'Nombre',
            lastName: 'Apellido', 
            email: 'Email',
            phone: 'Tel√©fono',
            service: 'Servicio',
            date: 'Fecha',
            time: 'Hora',
            address: 'Direcci√≥n'
        };
        return fieldNames[field] || field;
    }

    /**
     * GUARDADO LOCAL DE RESERVA
     * Guarda la reserva en localStorage del navegador como respaldo
     */
    saveBooking(data) {
        try {
            // Obtener reservas existentes
            const bookings = JSON.parse(localStorage.getItem('bookings') || '[]');
            
            // Crear objeto de reserva con metadatos
            const booking = {
                id: Date.now(),                         // ID √∫nico basado en timestamp
                ...data,                                // Todos los datos del formulario
                status: 'pending',                      // Estado inicial
                createdAt: new Date().toISOString()     // Timestamp de creaci√≥n
            };
            
            // A√±adir nueva reserva y guardar
            bookings.push(booking);
            localStorage.setItem('bookings', JSON.stringify(bookings));
            console.log('‚úÖ Reserva guardada localmente');
        } catch (error) {
            console.warn('‚ö†Ô∏è No se pudo guardar localmente:', error);
            // No bloquear el proceso si falla localStorage
        }
    }

    /**
     * CONTROL DE ESTADO DE CARGA
     * Cambia la apariencia del bot√≥n de env√≠o durante el procesamiento
     */
    setLoadingState(loading) {
        const submitBtn = document.getElementById('submitBtn');
        if (!submitBtn) return;

        const btnText = submitBtn.querySelector('.btn-text');        // Texto normal
        const btnLoading = submitBtn.querySelector('.btn-loading');  // Spinner de carga

        if (loading) {
            // Mostrar estado de carga
            if (btnText) btnText.classList.add('hidden');
            if (btnLoading) btnLoading.classList.remove('hidden');
            submitBtn.disabled = true;  // Deshabilitar bot√≥n
        } else {
            // Restaurar estado normal
            if (btnText) btnText.classList.remove('hidden');
            if (btnLoading) btnLoading.classList.add('hidden');
            submitBtn.disabled = false;  // Habilitar bot√≥n
        }
    }

    /**
     * M√âTODOS DE NOTIFICACI√ìN
     * Funciones auxiliares para mostrar mensajes al usuario
     */

    /**
     * MOSTRAR NOTIFICACI√ìN DE √âXITO
     */
    showSuccessNotification(message) {
        this.showNotification(message, 'success');
    }

    /**
     * MOSTRAR NOTIFICACI√ìN DE ERROR
     */
    showErrorNotification(message) {
        this.showNotification(message, 'error');
    }

    /**
     * MOSTRAR NOTIFICACI√ìN GEN√âRICA
     * Sistema principal de notificaciones con fallback
     */
    showNotification(message, type = 'info') {
        // Usar sistema de notificaciones de la app principal si est√° disponible
        if (window.App && window.App.showNotification) {
            window.App.showNotification(message, type);
        } else {
            // Fallback: log en consola y notificaci√≥n visual simple
            console.log(`${type.toUpperCase()}: ${message}`);
            this.createSimpleNotification(message, type);
        }
    }

    /**
     * CREAR NOTIFICACI√ìN VISUAL SIMPLE
     * Crea una notificaci√≥n toast b√°sica si no hay sistema principal
     */
    createSimpleNotification(message, type) {
        // Crear elemento de notificaci√≥n
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            max-width: 300px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            background-color: ${type === 'error' ? '#ef4444' : type === 'success' ? '#10b981' : '#3b82f6'};
            transform: translateX(100%);
            transition: transform 0.3s ease;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // Animar entrada (deslizar desde la derecha)
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 10);
        
        // Auto-remover despu√©s de un tiempo
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, type === 'error' ? 8000 : 5000);  // Errores se muestran m√°s tiempo
    }

    /**
     * M√âTODOS UTILITARIOS P√öBLICOS
     * Funciones para verificar estado y obtener datos
     */

    /**
     * VERIFICAR SI EL SISTEMA EST√Å LISTO
     * Retorna true si BookingManager y EmailJS est√°n inicializados
     */
    isReady() {
        return this.isInitialized && window.emailjs;
    }

    /**
     * OBTENER RESERVAS GUARDADAS
     * Recupera todas las reservas del almacenamiento local
     */
    getBookings() {
        try {
            return JSON.parse(localStorage.getItem('bookings') || '[]');
        } catch (error) {
            console.warn('Error reading bookings:', error);
            return [];
        }
    }
}

/**
 * INICIALIZACI√ìN AUTOM√ÅTICA
 * Crea instancia de BookingManager cuando el DOM est√© completamente cargado
 */
document.addEventListener('DOMContentLoaded', () => {
    // Solo inicializar si existe el formulario de reservas en la p√°gina
    if (document.getElementById('bookingForm')) {
        window.bookingManager = new BookingManager();
        console.log('üöÄ BookingManager inicializado');
    }
});

// Exportar clase para uso en m√≥dulos
export default BookingManager;